<!DOCTYPE html>
<html>
  <head>
    <title>3d pie chart</title>

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="description" content="opayra thierry vergult ebs oracle ebusiness suite payroll">
    <meta name="viewport" content="width=device-width">
    <meta name="mobile-web-app-capable" content="yes">
    
    <link rel="icon" type="image/svg+xml" href="./assets/favicon.svg">

    <script src="https://cdn.babylonjs.com/babylon.js"></script>
    <script src="./candy-pie-babylon.js"></script>

    <style>
      
      /* global css variable */
      :root {
        --main-color: #009FC2;
        --opposite-color: white;
      }
      
      .container {
        display: grid;
        grid-gap: 30px;
        grid-template-columns: repeat(auto-fit, minmax(360px, 1fr));
        grid-template-rows: repeat( 1, minmax(200px, 1fr));
        font-family: QuicksandBook, Arial, sans-serif;
      }
      
      .card > .header {
        color: white;
        font-weight: bold;
        background-color: var( --main-color);
        padding: 20px;
      }

      .card > .header > .note-right {
        float: right;
        color: var( --main-color);
        font-weight: bold;
        background-color: white;
        padding-left: 8px;
        padding-right: 8px;
        padding-top: 4px;
        padding-bottom: 2px;
        margin-top: -4px;
        border-radius: 10px;
      }
      
      .card .article {
        color: var( --main-color);
        padding: 20px;
      }
      
      .card a {
        color: var( --main-color);
        font-weight: bold;
        text-decoration: inherit;
      }
      
      .card .right {
        text-align: right;
        float: right;
      }

      pre {
        background-color: rgb(255, 247, 229);
        padding: 10px;
        white-space: pre-line;
        overflow: auto;
      }

      .candy-pie-title {
        font-weight: bold;
        font-size: large;
        margin-top: 20px;
        margin-bottom: 20px;
      }

      .candy-pie-babylon-canvas {
        touch-action: none;  /* Disables browsers from handling all pan and zoom interactions */
        width: 100%;
        outline: none; /* remove outline when clicking on canvas */
        margin-top: 10px;
      }
      
    </style>

  </head>

  <body>
    <div class='container'>
      <div class='card'  id='intro'>
        <div class='header'>candy pie</div>
        <div class='article'>
          <h3>candy pie: a configurable, interactive 3d pie chart in your browser</h3>
          <p>Let's break down that sentence ..</p>
          <ul>
            <li>candy: don't take it that seriously. Pie charts are not always loved.. One should not use 3d for charts.. Negative times negative equals positive?
            <li>pie: yes indeed, a pie chart. See above.
            <li>configurable: all options are described below. Curious which other options will prove to be interesting later on.
            <li>interactive: the result is not a static image, but a 3d object one can rotate. Or zoom into a slice.
            <li>3d: standing on the shoulders of
              <br> 
              <a href='https://www.babylonjs.com/' target="_blank">
                <img src="./candy-pie/babylonidentity.svg" width="50%">
              </a>
            <li>browser: works in a modern browser, desktop &amp; mobile.
          </ul>

          <br><br>
          <p>coming soon: open source</p>
        </div>
      </div>
      
      <div class='card' id='install'>
        <div class='header'>usage</div>
        <div class='article'>
          <p>Load first the babylon.js code into your page, and add the candy-pie script.</p>
          <pre>
            &lt;script src="https://cdn.babylonjs.com/babylon.js"&gt;&lt;/script&gt;
            &lt;script src="./candy-pie/candy-pie-babylon.js"&gt;&lt;/script&gt;
          </pre>

          <p>
            Define a canvas element in your html page, and call one single javascript function to place the 3d pie chart on that canvas element. 
            All data and configuration options are defined in one single javascript object.
          </p>
          <pre>
            &lt;canvas id='candy-pie-canvas-id' class='candy-pie-babylon-canvas'&gt;&lt;/canvas&gt;

            let my_pie3d = {
            &nbsp;  'htmlCanvasId': 'candy-pie-canvas-id',
            &nbsp;  'slices': [ ..],
            &nbsp;  ..
            };
            
            candy_pie_babylon( my_pie3d);

          </pre>

          <p>Set the width, height or aspect ratio of the canvas element as desired.</p>
          
          <p>some additional css can help</p>
          <pre>
            .candy-pie-babylon-canvas {
            &nbsp; /* Disables all pan and zoom interactions */
            &nbsp; touch-action: none; 
            &nbsp; /* remove outline when clicking on canvas */
            &nbsp; outline: none; 
            }
          </pre>

        </div>
      </div>

      <div class='card' id='minimal'>
        <div class='header'>minimal</div>
        <div class='article'>
          <div class='candy-pie-title'>default candy pie, without extra configuration</div>

          <p>A pie chart with 3 equal slices. Each slice is specified by
            <ul>
              <li>a height number, which maps to the relative height of each slice
              <li>a color, which can be specified in several formats (see later)
            </ul>
          </p>
          <p>All other options are defaulted, except the id of the canvas where one wants the 3d pie chart to show up.</p>

          <div>
            <canvas id='candy-pie-id00' class='candy-pie-babylon-canvas'></canvas>
    
            <script>
              let pie3d_default = {
                'htmlCanvasId': 'candy-pie-id00',
                'slices': [
                  { 'height': 100, 'color': 'indianred'},
                  { 'height': 100, 'color': 'steelblue'},
                  { 'height': 100, 'color': 'olive'}
                ]
              };
              
              candy_pie_babylon( pie3d_default);
            </script>
    
            <pre>
              let pie3d_default = {
                'htmlCanvasId': 'candy-pie-babylon-canvas-id-default',
                'slices': [
                &nbsp;  { 'height': 100, 'color': 'indianred'},
                &nbsp;  { 'height': 100, 'color': 'steelblue'},
                &nbsp;  { 'height': 100, 'color': 'olive'}
                ]
              };
                          
              // call the 3d pie function with the above settings
              candy_pie_babylon( pie3d_default);
            </pre>
    
          </div>

        </div>
      </div>

      <div class='card' id='1stOptions'>
        <div class='header'>some options</div>
        <div class='article'>
            <p>The same pie chart, but with some extra space between the slices, and a donut hole. And a lightgrey background.
              Simply set the following options in the pie3d object:
            <ul>
              <li><i>spaceBetweenSlices</i>: default false, set to true in case
              <li><i>innerRadiusPct</i>: default 0, set to a higher number to have a donut
              <li><i>backgroundColor</i>: set the color of the background of the canvas
            </ul>
          </p>

          <div>
            <canvas id='candy-pie-id01' class='candy-pie-babylon-canvas'></canvas>
    
            <script>
              let pie3d_2 = {
                'htmlCanvasId': 'candy-pie-id01',
                'slices': [
                  { 'height': 100, 'color': 'indianred'},
                  { 'height': 100, 'color': 'steelblue'},
                  { 'height': 100, 'color': 'olive'}
                ],
                'spaceBetweenSlices': true,
                'innerRadiusPct': 40,
                'backgroundColor': 'lightgrey'
              };
              
              candy_pie_babylon( pie3d_2);
            </script>
    
            <pre>
              let pie3d_2 = {
                'htmlCanvasId': 'candy-pie-id01',
                'slices': [
                 &nbsp; { 'height': 100, 'color': 'indianred'},
                 &nbsp; { 'height': 100, 'color': 'steelblue'},
                 &nbsp; { 'height': 100, 'color': 'olive'}
                ],
                'spaceBetweenSlices': true,
                'innerRadiusPct': 40,
                'backgroundColor': 'lightgrey'
              };
            </pre>
    
          </div>

        </div>
      </div>


      <div class='card' id='options2'>
        <div class='header'>some more options</div>
        <div class='article'>
            <p>The same pie chart, but now without vertical rotation, the initial camera angle position is a little lower, so the donut shows more flat, and when you click a slice, the slice expands a little:
            <ul>
              <li><i>allowVerticalRotation</i>: default true, here set to false. So now only horizontal rotation is possible.
              <li><i>cameraDegreesY</i>: the camera position is set to 30 degrees, a little lower than the default of 45 degrees. Camera position starts at the ground plane.
              <li><i>clickScalePct</i>: When clicking on a slice, the slice will grow a certain percentage. Default 0%; so no zooming at all. Click once again to return to the original size.
            </ul>
          </p>

          <div>
            <canvas id='candy-pie-id03' class='candy-pie-babylon-canvas' style="aspect-ratio: 3/2;"></canvas>
    
            <script>
              let pie3d_3 = {
                'htmlCanvasId': 'candy-pie-id03',
                'slices': [
                  { 'height': 100, 'color': 'indianred'},
                  { 'height': 100, 'color': 'steelblue'},
                  { 'height': 100, 'color': 'olive'}
                ],
                'spaceBetweenSlices': true,
                'innerRadiusPct': 40,
                'backgroundColor': 'lightgrey',
                // 3 more options
                'cameraDegreesY': 30,
                'allowVerticalRotation': false,
                'clickScalePct': 20
              };
              
              candy_pie_babylon( pie3d_3);
            </script>
    
            <pre>
              
              &nbsp; 'cameraDegreesY': 30,
              &nbsp; 'allowVerticalRotation': false,
              &nbsp; 'clickScalePct': 20
              
            </pre>
    
          </div>

        </div>
      </div>

      <div class='card' id='height-widt-arc'>
        <div class='header'>variable height and width</div>
        <div class='article'>
          <p>
            Until now, all pie charts had slices with the same size. 
            Changing the height of the slices changes the relative height. 
            And setting the arc percentage drives the "width" of each slice.
          </p>
          <p>The first slice of this example below takes 50%, the other 2 slices take each 25%.</p>
          <p>The height increases from 100, to 125, to 150. This influences the relative height of the slices.</p>

          <div>
            <canvas id='candy-pie-id04' class='candy-pie-babylon-canvas' style="aspect-ratio: 3/2;"></canvas>
    
            <script>
              let pie3d_4 = {
                'htmlCanvasId': 'candy-pie-id04',
                'slices': [
                  { 'height': 100, 'arcPct': 50, 'color': 'indianred'},
                  { 'height': 125, 'arcPct': 25, 'color': 'steelblue'},
                  { 'height': 150, 'arcPct': 25, 'color': 'olive'}
                ],
                'spaceBetweenSlices': true,
                'innerRadiusPct': 40,
                'backgroundColor': 'lightgrey',
                'cameraDegreesY': 30
              };
              
              candy_pie_babylon( pie3d_4);
            </script>
    
            <pre>
              
              'slices': [
                  { 'height': 100, 'arcPct': 50, ..},
                  { 'height': 125, 'arcPct': 25, ..},
                  { 'height': 150, 'arcPct': 25, ..}
                ],
              
            </pre>
    
          </div>

        </div>
      </div>


      <div class='card' id='labels'>
        <div class='header'>labels</div>
        <div class='article'>
          <p>A few options for the labels shown on the slice surface:</p>
          <ul>
            <li>showLabel: boolean, default false.
            <li>showHeight: boolean, default false.
            <li>labelFontFactor: default 1. In case a greater font is desired, increase here the font factor.
            <li>labelExtraTopMargin: default 0. Increment this figure in case the labels should show up a little lower within each slice.
            <li>labelColor: default empty. If so, the scripts uses black or white labels, depending of the color of the slice. If not, this color is used for all slices.
          </ul>
        </div>
      </div>


      <div class='card' id='all-in'>
        <div class='header'>Variable pie chart with labels</div>
        <div class='article'>
                   
          <p>Here a pie chart with 5 slices and labels. The slices have a variable height and a variable arc : slice 4 is smaller, applepie is larger than the others.</p>

          <pre id='id-pick-color'>
            'slices': [
            &nbsp; { 'height': 10, 'arcPct': 20, 'label': 'one'},
            &nbsp; { 'height': 12, 'arcPct': 20, 'label': 'two'},
            &nbsp; { 'height': 14, 'arcPct': 20, 'label': 'three'},
            &nbsp; { 'height': 16, 'arcPct': 10, 'label': 'four'},
            &nbsp; { 'height': 18, 'arcPct': 30, 'label': 'apples'}
            ],
            ..
            'showLabel': true,
            'labelFontFactor': 1.5,
            
          </pre>
          
          <p>ps: the background color of the pie chart is dynamically taken from the code snippet above. Can be handy when you want to reuse colors of your site in the pie.</p>

          <div>
            <canvas id='candy-pie-babylon-canvas-id' class='candy-pie-babylon-canvas' style="aspect-ratio: 16/9"></canvas>

            <script>
              let pie3d = {
                'htmlCanvasId': 'candy-pie-babylon-canvas-id',
                'slices': [
                  { 'height': 10, 'arcPct': 1/5 * 100,  'color': 'indianred', 'label': 'one'},
                  { 'height': 12, 'arcPct': 1/5 * 100,  'color': 'steelblue', 'label': 'two'},
                  { 'height': 14, 'arcPct': 1/5 * 100,  'color': 'olive',     'label': 'three'},
                  { 'height': 16, 'arcPct': 1/10 * 100, 'color': 'aliceblue', 'label': 'four'},
                  { 'height': 18, 'arcPct': 3/10 * 100, 'color': '#F5DEB3',   'label': 'apples'} // color: wheat
                ],
                'spaceBetweenSlices': true,
                'innerRadiusPct': 40,
                'showLabel': true,
                'labelFontFactor': 1.5,
                'backgroundColor': window.getComputedStyle( document.getElementById( 'id-pick-color')).backgroundColor,
                'clickScalePct': 20,
                'verticalFactor': 1.6 // increment this number in case you want higher vertical slices
              };
              
              candy_pie_babylon( pie3d);
            </script>

          </div>
          
        </div>
      </div>


      <div class='card' id='vertical'>
        <div class='header'>higher slices</div>
        <div class='article'>
          <p>This pie chart has also 5 slices, all with same width (arc), but the slices are all made higher than in the previous pie chart. 
            This is done via the <i>verticalFactor</i> configuration option, which stretches the slices vertically.</p>
  
        <div>
          <canvas id='candy-pie-babylon-canvas-id2' class='candy-pie-babylon-canvas' style="width:80%; margin-left: 10%; aspect-ratio: 1/1"></canvas>
  
          <script>
            let pie3d2 = {
              'htmlCanvasId': 'candy-pie-babylon-canvas-id2',
              'slices': [
                { 'height': 100, 'arcPct': 1/5 * 100, 'color': 'indianred', 'label': 'one'},
                { 'height':  80, 'arcPct': 1/5 * 100, 'color': 'steelblue', 'label': 'two'},
                { 'height': 120, 'arcPct': 1/5 * 100, 'color': 'olive',     'label': 'three'},
                { 'height':  80, 'arcPct': 1/5 * 100, 'color': 'aliceblue', 'label': 'four'},
                { 'height': 120, 'arcPct': 1/5 * 100, 'color': '#F5DEB3',   'label': 'apples'} // color: wheat
              ],
              'spaceBetweenSlices': true,
              'innerRadiusPct': 40, // use 0 to get rid of the donut hole
              'showHeight': true,
              'showLabel': true,
              'labelFontFactor': 1.5,
              'backgroundColor': 'rgb(155, 102, 102)',
              'clickScalePct': 20,
              'verticalFactor': 4
            };
            
            candy_pie_babylon( pie3d2);
          </script>

          <pre>
            
            'verticalFactor': 4
            
          </pre>
  
        </div>    
        </div>
      </div>



      <div class='card' id='holidays'>
        <div class='header'>holiday pie chart</div>
        <div class='article'>

          <p>This pie chart has 4 equal slices. Some label-configuration options are used to position & color the labels on the pie.</p>
          <div>
            <canvas id='candy-pie-babylon-canvas-id3' class='candy-pie-babylon-canvas' style="width:75%; margin-left: 12%; aspect-ratio: 4/3"></canvas>

            <script>
              candy_pie_babylon( {
                'htmlCanvasId': 'candy-pie-babylon-canvas-id3',
                'slices': [
                  { 'height': 1, 'color': 'lightblue', 'label': 'swimming'},
                  { 'height': 1, 'color': '#f8f6e1',   'label': 'ice cream'},
                  { 'height': 1, 'color': 'lightblue', 'label': 'cocktails'},
                  { 'height': 1, 'color': '#f8f6e1',   'label': 'relaxing'}
                ],
                'spaceBetweenSlices': true,
                'innerRadiusPct': 25, // use 0 to get rid of the donut hole
                'showLabel': true,
                'labelFontFactor': 2.5,
                'labelExtraTopMargin': 20,
                'labelColor': 'rgb(155, 102, 102)',
                'backgroundColor': 'rgb(196,238,216)', // green-ish
                'clickScalePct': 0,
                'verticalFactor': 2,
                'allowVerticalRotation' : false,
                'cameraDegreesY': 30
              });
            </script>

            <pre>

              'labelFontFactor': 2.5,
              'labelExtraTopMargin': 20,
              'labelColor': 'rgb(155, 102, 102)',
              'backgroundColor': 'rgb(196,238,216)', // green-ish
              'clickScalePct': 0,
              'verticalFactor': 2,
              'allowVerticalRotation' : false,
              'cameraDegreesY': 60

            </pre>

          </div>
          
        </div>
      </div>


            

      <div class='card' id='colors'>
        <div class='header'>colors</div>
        <div class='article'>
          <p>The color of the slices and the canvas background are always set via a string.</p>
          <p>Such string can be:</p>
          <ul>
            <li>a named color, like <span style="font-family:courier, monospace;">red</span>. <a href='https://www.w3schools.com/colors/colors_names.asp' target='_blank' >Some more color names.</a></li>
            <li>a hexadecimal value, like <span style="font-family:courier, monospace;">#f8f6e1</span></li>
            <li>a rgb function call, like <span style="font-family:courier, monospace;">rgb(196,238,216)</span></li>
            <li>a javascript function returning such color string</li>
          </ul>
        </div>
      </div>


      <div class='card' id='playground'>
        <div class='header'>babylon playground</div>
        <div class='article'>
          <p>Within the Babylon playground, you can set the configuration options at the top of the javascript code, hit the Run button, and the corresponding 3d pie chart will show up.</p>
          <br>
          <a href='https://playground.babylonjs.com/#PVJ1GM#2' target='_blank' style="display:block; text-align:center;">
            <img src="./candy-pie/babylonidentity.svg" width="50%" style="border: 4px solid lightgrey; padding-right: 30px">
          </a>
          <br>
          <p>Or you can make any other change in the code, possibilities are rather endless with a 3d game engine ..</p>
        </div>
      </div>

    </div>
    
</body>
</html>
